/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.hdsb.gwss.Ahmad.ICS4U.Unit_2;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author 1elmasriahm
 */
public class Game2048 extends javax.swing.JFrame {

    /**
     * Creates new form Game2048
     */
    private JLabel[][] squares;
    private int[][] values;
    private int score = 0;
    private Scanner input;
    private final File highScoreFile = new File(".\\data\\HighScore.txt");
    private int highScore;
    private FileWriter output;
    private static final int EMPTY = 0;
    private static final Color TWO_COLOR = new Color(238, 228, 218);
    private static final Color EMPTY_COLOR = new Color(204, 192, 179);
    private static final Color FOUR_COLOR = new Color(237, 224, 200);
    private static final Color EIGHT_COLOR = new Color(242, 177, 121);
    private static final Color SIXTEEN_COLOR = new Color(245, 145, 99);
    private static final Color THIRTYTWO_COLOR = new Color(246, 124, 95);
    private static final Color SIXTYFOUR_COLOR = new Color(246, 94, 59);
    private static final Color ONETWENTYEIGHT_COLOR = new Color(237, 207, 114);
    private static final Color TWOFIFTYSIX_COLOR = new Color(237, 204, 97);
    private static final Color FIVETWELVE_COLOR = new Color(237, 200, 80);
    private static final Color TENTWENTYFOUR_COLOR = new Color(237, 197, 63);
    private static final Color TWENTYFOURTYEIGHT_COLOR = new Color(237, 194, 46);
    private static final Color HIGHER = new Color(62, 47, 51);
    private static final Color TEXT_LOWER = new Color(119, 110, 101);
    private static final Color TEXT_HIGHER = new Color(249, 246, 242);

    public Game2048() throws FileNotFoundException, IOException {
        
        initComponents();
        squares = new JLabel[4][4];
        

        //Col 1
        squares[0][0] = jLabelcol0row0;
        squares[0][1] = jLabelcol0row1;
        squares[0][2] = jLabelcol0row2;
        squares[0][3] = jLabelcol0row3;

        //Col 2
        squares[1][0] = jLabelcol1row0;
        squares[1][1] = jLabelcol1row1;
        squares[1][2] = jLabelcol1row2;
        squares[1][3] = jLabelcol1row3;

        //Col 3
        squares[2][0] = jLabelcol2row0;
        squares[2][1] = jLabelcol2row1;
        squares[2][2] = jLabelcol2row2;
        squares[2][3] = jLabelcol2row3;

        //Col 4
        squares[3][0] = jLabelcol3row0;
        squares[3][1] = jLabelcol3row1;
        squares[3][2] = jLabelcol3row2;
        squares[3][3] = jLabelcol3row3;

        //clear the Game Board
        clearBoard();
        placeRandomTwo(2);
        updateSquares();
        highScoreOpen();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelScorePanel = new javax.swing.JPanel();
        jLabelTitle = new javax.swing.JLabel();
        jLabelScoreLabel = new javax.swing.JLabel();
        jLabelScore = new javax.swing.JLabel();
        jLabelGameOver = new javax.swing.JLabel();
        jLabelHighScore = new javax.swing.JLabel();
        jLabelHighScoreCount = new javax.swing.JLabel();
        jPanelGamePanel = new javax.swing.JPanel();
        jLabelcol0row0 = new javax.swing.JLabel();
        jLabelcol0row1 = new javax.swing.JLabel();
        jLabelcol0row2 = new javax.swing.JLabel();
        jLabelcol0row3 = new javax.swing.JLabel();
        jLabelcol1row0 = new javax.swing.JLabel();
        jLabelcol1row1 = new javax.swing.JLabel();
        jLabelcol1row2 = new javax.swing.JLabel();
        jLabelcol1row3 = new javax.swing.JLabel();
        jLabelcol2row0 = new javax.swing.JLabel();
        jLabelcol3row0 = new javax.swing.JLabel();
        jLabelcol2row1 = new javax.swing.JLabel();
        jLabelcol2row2 = new javax.swing.JLabel();
        jLabelcol2row3 = new javax.swing.JLabel();
        jLabelcol3row1 = new javax.swing.JLabel();
        jLabelcol3row2 = new javax.swing.JLabel();
        jLabelcol3row3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("2048 Ahmad");
        setBackground(new java.awt.Color(131, 131, 131));
        setForeground(new java.awt.Color(187, 187, 187));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanelScorePanel.setBackground(new java.awt.Color(228, 228, 228));

        jLabelTitle.setBackground(new java.awt.Color(237, 194, 46));
        jLabelTitle.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelTitle.setForeground(new java.awt.Color(249, 246, 242));
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText("2048");
        jLabelTitle.setOpaque(true);

        jLabelScoreLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelScoreLabel.setText("Score : ");

        jLabelScore.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelScore.setText("0");

        jLabelGameOver.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelGameOver.setText(" ");

        jLabelHighScore.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelHighScore.setText("High Score : ");

        jLabelHighScoreCount.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelHighScoreCount.setText("0");

        javax.swing.GroupLayout jPanelScorePanelLayout = new javax.swing.GroupLayout(jPanelScorePanel);
        jPanelScorePanel.setLayout(jPanelScorePanelLayout);
        jPanelScorePanelLayout.setHorizontalGroup(
            jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelScorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelGameOver)
                    .addGroup(jPanelScorePanelLayout.createSequentialGroup()
                        .addGroup(jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelScoreLabel)
                            .addComponent(jLabelScore))
                        .addGap(46, 46, 46)
                        .addGroup(jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelHighScoreCount)
                            .addComponent(jLabelHighScore))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelScorePanelLayout.setVerticalGroup(
            jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelScorePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelScorePanelLayout.createSequentialGroup()
                        .addGroup(jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelScoreLabel)
                            .addComponent(jLabelHighScore))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelScorePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelScore)
                            .addComponent(jLabelHighScoreCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelGameOver))
                    .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelGamePanel.setBackground(new java.awt.Color(187, 173, 160));

        jLabelcol0row0.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol0row0.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol0row0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol0row0.setText("1024");
        jLabelcol0row0.setOpaque(true);

        jLabelcol0row1.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol0row1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol0row1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol0row1.setText("1024");
        jLabelcol0row1.setOpaque(true);

        jLabelcol0row2.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol0row2.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol0row2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol0row2.setText("1024");
        jLabelcol0row2.setOpaque(true);

        jLabelcol0row3.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol0row3.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol0row3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol0row3.setText("1024");
        jLabelcol0row3.setOpaque(true);

        jLabelcol1row0.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol1row0.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol1row0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol1row0.setText("1024");
        jLabelcol1row0.setOpaque(true);

        jLabelcol1row1.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol1row1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol1row1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol1row1.setText("1024");
        jLabelcol1row1.setOpaque(true);

        jLabelcol1row2.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol1row2.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol1row2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol1row2.setText("1024");
        jLabelcol1row2.setOpaque(true);

        jLabelcol1row3.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol1row3.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol1row3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol1row3.setText("1024");
        jLabelcol1row3.setOpaque(true);

        jLabelcol2row0.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol2row0.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol2row0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol2row0.setText("1024");
        jLabelcol2row0.setOpaque(true);

        jLabelcol3row0.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol3row0.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol3row0.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol3row0.setText("1024");
        jLabelcol3row0.setOpaque(true);

        jLabelcol2row1.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol2row1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol2row1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol2row1.setText("1024");
        jLabelcol2row1.setOpaque(true);

        jLabelcol2row2.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol2row2.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol2row2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol2row2.setText("1024");
        jLabelcol2row2.setOpaque(true);

        jLabelcol2row3.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol2row3.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol2row3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol2row3.setText("1024");
        jLabelcol2row3.setOpaque(true);

        jLabelcol3row1.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol3row1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol3row1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol3row1.setText("1024");
        jLabelcol3row1.setOpaque(true);

        jLabelcol3row2.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol3row2.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol3row2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol3row2.setText("1024");
        jLabelcol3row2.setOpaque(true);

        jLabelcol3row3.setBackground(new java.awt.Color(237, 237, 237));
        jLabelcol3row3.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabelcol3row3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelcol3row3.setText("1024");
        jLabelcol3row3.setOpaque(true);

        javax.swing.GroupLayout jPanelGamePanelLayout = new javax.swing.GroupLayout(jPanelGamePanel);
        jPanelGamePanel.setLayout(jPanelGamePanelLayout);
        jPanelGamePanelLayout.setHorizontalGroup(
            jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                        .addComponent(jLabelcol0row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelcol1row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelcol2row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                        .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                                .addComponent(jLabelcol0row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelcol1row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                                .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelcol0row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelcol0row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelcol1row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelcol1row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelcol2row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelcol2row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelcol2row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelcol3row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelcol3row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelcol3row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelcol3row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelGamePanelLayout.setVerticalGroup(
            jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelcol0row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelcol1row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelcol2row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelcol3row0, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                        .addComponent(jLabelcol3row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelcol3row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelcol3row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                        .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelcol1row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelcol0row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelcol1row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelcol0row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelGamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelcol1row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelcol0row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelGamePanelLayout.createSequentialGroup()
                        .addComponent(jLabelcol2row1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelcol2row2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelcol2row3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelGamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelScorePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelScorePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelGamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        System.out.print("KEY PRESSED: ");
        if (canMove()) {
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_UP:
                    System.out.println("UP");
                    shiftUp();
                    mergeUp();
                    shiftUp();
                    break;
                case KeyEvent.VK_DOWN:
                    System.out.println("DOWN");
                    shiftDown();
                    mergeDown();
                    shiftDown();
                    break;
                case KeyEvent.VK_LEFT:
                    System.out.println("LEFT");
                    shiftLeft();
                    mergeLeft();
                    shiftLeft();
                    break;
                case KeyEvent.VK_RIGHT:
                    System.out.println("RIGHT");
                    shiftRight();
                    mergeRight();
                    shiftRight();
                    break;
            }
        }else{
            System.out.println("Game Over");
            jLabelGameOver.setText("Game Over");
        }

    }//GEN-LAST:event_formKeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
       
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game2048.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game2048.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game2048.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game2048.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Game2048().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Game2048.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Game2048.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelGameOver;
    private javax.swing.JLabel jLabelHighScore;
    private javax.swing.JLabel jLabelHighScoreCount;
    private javax.swing.JLabel jLabelScore;
    private javax.swing.JLabel jLabelScoreLabel;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JLabel jLabelcol0row0;
    private javax.swing.JLabel jLabelcol0row1;
    private javax.swing.JLabel jLabelcol0row2;
    private javax.swing.JLabel jLabelcol0row3;
    private javax.swing.JLabel jLabelcol1row0;
    private javax.swing.JLabel jLabelcol1row1;
    private javax.swing.JLabel jLabelcol1row2;
    private javax.swing.JLabel jLabelcol1row3;
    private javax.swing.JLabel jLabelcol2row0;
    private javax.swing.JLabel jLabelcol2row1;
    private javax.swing.JLabel jLabelcol2row2;
    private javax.swing.JLabel jLabelcol2row3;
    private javax.swing.JLabel jLabelcol3row0;
    private javax.swing.JLabel jLabelcol3row1;
    private javax.swing.JLabel jLabelcol3row2;
    private javax.swing.JLabel jLabelcol3row3;
    private javax.swing.JPanel jPanelGamePanel;
    private javax.swing.JPanel jPanelScorePanel;
    // End of variables declaration//GEN-END:variables
public void clearBoard() {
        values = new int[4][4];
        
        for (int col = 0; col < squares.length; col++) {
            for (int row = 0; row < squares[col].length; row++) {
                squares[col][row].setText("");

            }
        }
    }

    public void placeRandomTwo(int amount) {
        try {
            highScore();
        } catch (IOException ex) {
            Logger.getLogger(Game2048.class.getName()).log(Level.SEVERE, null, ex);
        }
        int twoCount = 0;
        int row;
        int col;

        if (!isFull()) {
            while (twoCount < amount) {
                row = (int) (Math.random() * 4);
                col = (int) (Math.random() * 4);
                if (values[col][row] == EMPTY) {
                    values[col][row] = 2;
                    twoCount++;
                }
            }
        }

    }

    public void updateSquares() {
        for (int col = 0; col < squares.length; col++) {
            for (int row = 0; row < squares[col].length; row++) {
                if (values[col][row] == EMPTY) {
                    squares[col][row].setBackground(EMPTY_COLOR);
                    squares[col][row].setText("");

                } else {
                    squares[col][row].setForeground(TEXT_HIGHER);
                    switch (values[col][row]) {
                        case 2:
                            squares[col][row].setBackground(TWO_COLOR);
                            squares[col][row].setForeground(TEXT_LOWER);
                            break;
                        case 4:
                            squares[col][row].setBackground(FOUR_COLOR);
                            squares[col][row].setForeground(TEXT_LOWER);
                            break;
                        case 8:
                            squares[col][row].setBackground(EIGHT_COLOR);
                            break;
                        case 16:
                            squares[col][row].setBackground(SIXTEEN_COLOR);
                            break;
                        case 32:
                            squares[col][row].setBackground(THIRTYTWO_COLOR);
                            break;
                        case 64:
                            squares[col][row].setBackground(SIXTYFOUR_COLOR);
                            break;
                        case 128:
                            squares[col][row].setBackground(ONETWENTYEIGHT_COLOR);
                            break;
                        case 256:
                            squares[col][row].setBackground(TWOFIFTYSIX_COLOR);
                            break;
                        case 512:
                            squares[col][row].setBackground(FIVETWELVE_COLOR);
                            break;
                        case 1024:
                            squares[col][row].setBackground(TENTWENTYFOUR_COLOR);
                            break;
                        case 2048:
                            squares[col][row].setBackground(TWENTYFOURTYEIGHT_COLOR);
                            break;
                        default:
                            squares[col][row].setBackground(HIGHER);
                            break;
                    }
                    squares[col][row].setText("" + values[col][row]);
                    
                    
                }
            }
        }
        jPanelGamePanel.repaint();
    }

    public void shiftLeft() {
        for (int number = 0; number < values.length; number++) {
            for (int row = 0; row < values.length; row++) {
                for (int col = values[row].length - 1; col > 0; col--) {
                    if (values[(col - 1)][row] == EMPTY) {
                        values[(col - 1)][row] = values[col][row];
                        values[col][row] = EMPTY;
                    }
                }
            }
        }

        placeRandomTwo(1);
        updateSquares();

    }

    public void mergeLeft() {
        for (int row = 0; row < values.length; row++) {
            for (int col = values[row].length - 1; col > 0; col--) {
                if (values[(col - 1)][row] == values[col][row]) {
                    values[(col - 1)][row] += values[col][row];
                    addScore(values[col-1][row]);
                    values[col][row] = EMPTY;
                }
            }
        }
    }

    public void shiftRight() {
        for (int number = 0; number < values.length; number++) {
            for (int row = 0; row < values.length; row++) {
                for (int col = 0; col < values[row].length - 1; col++) {
                    if (values[(col + 1)][row] == EMPTY) {
                        values[(col + 1)][row] = values[col][row];
                        values[col][row] = EMPTY;
                    }
                }
            }
        }

        placeRandomTwo(1);
        updateSquares();
    }

    public void mergeRight() {
        for (int row = 0; row < values.length; row++) {
            for (int col = 0; col < values[row].length - 1; col++) {
                if (values[(col + 1)][row] == values[col][row]) {
                    values[(col + 1)][row] += values[col][row];
                    addScore(values[col+1][row]);
                    values[col][row] = EMPTY;
                }
            }
        }
    }

    public void shiftUp() {
        for (int number = 0; number < values.length; number++) {
            for (int col = 0; col < values.length; col++) {
                for (int row = values[col].length - 1; row > 0; row--) {
                    if (values[col][row - 1] == EMPTY) {
                        values[col][row - 1] = values[col][row];
                        values[col][row] = EMPTY;
                    }
                }
            }
        }
        placeRandomTwo(1);
        updateSquares();

    }

    public void mergeUp() {
        for (int col = 0; col < values.length; col++) {
            for (int row = values[col].length - 1; row > 0; row--) {
                if (values[col][row - 1] == values[col][row]) {
                    values[col][row - 1] += values[col][row];
                    addScore(values[col][row - 1]);
                    values[col][row] = EMPTY;
                }
            }
        }
    }

    public void shiftDown() {
        for (int number = 0; number < values.length; number++) {
            for (int col = 0; col < values.length; col++) {
                for (int row = 0; row < values[col].length - 1; row++) {
                    if (values[col][row + 1] == EMPTY) {
                        values[col][row + 1] = values[col][row];
                        values[col][row] = EMPTY;
                    }
                }
            }
        }

        placeRandomTwo(1);
        updateSquares();
    }

    public void mergeDown() {
        for (int col = 0; col < values.length; col++) {
            for (int row = 0; row < values[col].length - 1; row++) {
                if (values[col][row + 1] == values[col][row]) {
                    values[col][row + 1] += values[col][row];
                    addScore(values[col][row + 1]);
                    values[col][row] = EMPTY;
                }
            }
        }
    }

    public boolean isFull() {
        boolean isFull = true;
        for (int col = 0; col < values.length; col++) {
            for (int row = 0; row < values[col].length; row++) {
                if (values[col][row] == EMPTY) {
                    isFull = false;
                }
            }
        }
        return isFull;
    }

    public boolean canMove() {
        boolean canMove = false;
        for (int col = 0; col < values.length; col++) {
            for (int row = 0; row < values[col].length - 1; row++) {
                if (values[col][row + 1] == values[col][row]) {
                    canMove = true;
                }
            }
        }

        for (int row = 0; row < values.length; row++) {
            for (int col = 0; col < values[row].length - 1; col++) {
                if (values[(col + 1)][row] == values[col][row]) {
                    canMove = true;
                }
            }
        }
        
        for (int number = 0; number < values.length; number++) {
            for (int col = 0; col < values.length; col++) {
                for (int row = 0; row < values[col].length - 1; row++) {
                    if (values[col][row + 1] == EMPTY) {
                        canMove = true;
                    }
                }
            }
        }
        
        for (int number = 0; number < values.length; number++) {
            for (int row = 0; row < values.length; row++) {
                for (int col = 0; col < values[row].length - 1; col++) {
                    if (values[(col + 1)][row] == EMPTY) {
                        canMove = true;
                    }
                }
            }
        }
        
        for (int number = 0; number < values.length; number++) {
            for (int col = 0; col < values.length; col++) {
                for (int row = 0; row < values[col].length - 1; row++) {
                    if (values[col][row + 1] == EMPTY) {
                        canMove = true;
                    }
                }
            }
        }
        
        for (int number = 0; number < values.length; number++) {
            for (int row = 0; row < values.length; row++) {
                for (int col = 0; col < values[row].length - 1; col++) {
                    if (values[(col + 1)][row] == EMPTY) {
                        canMove = true;
                    }
                }
            }
        }

        return canMove;
    }
    
    public void addScore(int scoreAdded){
        score += scoreAdded;
        jLabelScore.setText(score + "");
    }
    
    public void highScoreOpen() throws FileNotFoundException, IOException{    
        input = new Scanner(highScoreFile);
        highScore = Integer.parseInt(input.nextLine());
        jLabelHighScoreCount.setText(highScore + "");
        
    }
    
    public void highScore() throws FileNotFoundException, IOException{
        if (score > highScore) {
            jLabelHighScoreCount.setText(score + "");
            output = new FileWriter(highScoreFile);
            output.write(score + "");
            output.close();
        
        }
        
    }
}
