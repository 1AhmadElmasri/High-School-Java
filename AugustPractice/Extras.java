package AugustPractice;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;

/**
 * Extras class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class Extras {

    //Outputs
    private Mat cvErodeOutput = new Mat();
    private Mat cvDilateOutput = new Mat();

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    /**
     * This is the primary method that runs the entire pipeline and updates the
     * outputs.
     */
//	public static Mat process(Mat source0) {
//		// Step CV_erode0:
//		Mat cvErodeSrc = source0;
//		Mat cvErodeKernel = new Mat();
//		Point cvErodeAnchor = new Point(-1, -1);
//		double cvErodeIterations = 2.0;
//		int cvErodeBordertype = Core.BORDER_CONSTANT;
//		Scalar cvErodeBordervalue = new Scalar(-1);
//		cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);
//
//		// Step CV_dilate0:
//		Mat cvDilateSrc = cvErodeOutput;
//		Mat cvDilateKernel = new Mat();
//		Point cvDilateAnchor = new Point(-1, -1);
//		double cvDilateIterations = 7.0;
//		int cvDilateBordertype = Core.BORDER_CONSTANT;
//		Scalar cvDilateBordervalue = new Scalar(-1);
//		cvDilate(cvDilateSrc, cvDilateKernel, cvDilateAnchor, cvDilateIterations, cvDilateBordertype, cvDilateBordervalue, cvDilateOutput);
//                
//                return cvDilateOutput;
//
//	}
    /**
     * Expands area of lower value in an image.
     *
     * @param src the Image to erode.
     * @param kernel the kernel for erosion.
     * @param anchor the center of the kernel.
     * @param iterations the number of times to perform the erosion.
     * @param borderType pixel extrapolation method.
     * @param borderValue value to be used for a constant border.
     * @param dst Output Image.
     */
    public static Mat cvErode(Mat src) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Mat cvErodeKernel = new Mat();
        Point cvErodeAnchor = new Point(-1, -1);
        double cvErodeIterations = 2.0;
        int cvErodeBordertype = Core.BORDER_CONSTANT;
        Scalar cvErodeBordervalue = new Scalar(-1);

        Mat dst = src;
        if (cvErodeKernel == null) {
            cvErodeKernel = new Mat();
        }
        if (cvErodeAnchor == null) {
            cvErodeAnchor = new Point(-1, -1);
        }
        if (cvErodeBordervalue == null) {
            cvErodeBordervalue = new Scalar(-1);
        }
        Imgproc.erode(src, dst, cvErodeKernel, cvErodeAnchor, (int) cvErodeIterations, cvErodeBordertype, cvErodeBordervalue);
        return dst;
    }

    /**
     * Expands area of higher value in an image.
     *
     * @param src the Image to dilate.
     * @param kernel the kernel for dilation.
     * @param anchor the center of the kernel.
     * @param iterations the number of times to perform the dilation.
     * @param borderType pixel extrapolation method.
     * @param borderValue value to be used for a constant border.
     * @param dst Output Image.
     */
    public static Mat cvDilate(Mat src) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Mat cvDilateKernel = new Mat();
	Point cvDilateAnchor = new Point(-1, -1);
        double cvDilateIterations = 14.0;
        int cvDilateBordertype = Core.BORDER_CONSTANT;
        Scalar cvDilateBordervalue = new Scalar(-1);

        Mat dst = src;
        if (cvDilateKernel == null) {
            cvDilateKernel = new Mat();
        }
        if (cvDilateAnchor == null) {
            cvDilateAnchor = new Point(-1, -1);
        }
        if (cvDilateBordervalue == null) {
            cvDilateBordervalue = new Scalar(-1);
        }
        Imgproc.dilate(src, dst, cvDilateKernel, cvDilateAnchor, (int) cvDilateIterations, cvDilateBordertype, cvDilateBordervalue);
        return dst;
    }

}
